name: Deploy AWS PROD

on:
  push:
    branches:
      - main

jobs:
  publish-ecr:
    name: push
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
    - name: Code Checkout
      uses: actions/checkout@v3

    - name: Setup JDK
      uses: actions/setup-java@v2
      with:
        java-version: '11'
        distribution: 'temurin'  
    - name: Maven Build
      run: mvn clean package
      working-directory: ./

    #AWS CREDENTIALS
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-region: ${{ vars.AWS_REGION}}
        role-to-assume: ${{ secrets.AWS_ROLE }}
        role-session-name: myGitHubActions
    #Private ECR Login
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    #BUILD, TAG image and PUSH
    - name: Build, tag, and push docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: soat-repository
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        echo "image=$REGISTRY/$REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

  create-and-run-api:
    name: deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    steps:
      - name: Code Checkout
        uses: actions/checkout@v3
      #AWS CREDENTIALS
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ vars.AWS_REGION}}
          role-to-assume: ${{ secrets.AWS_ROLE }}
          role-session-name: myGitHubActions
      #Terraform execution
      - name: Terraform Init
        run: |
          cd ./terraform
          terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Display Outputs
        run: terraform output
